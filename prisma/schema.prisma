// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String           @id @unique
  name          String
  username      String           @unique
  session       Session[]
  Key           Key[]
  profile       ExtendedProfile?
  avatar        Avatar?
  polls         Poll[]
  pollResponses PollResponses[]

  @@index([username], map: "uq_username")
  @@map("user")
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("session")
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  primary         Boolean
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("key")
}

model ExtendedProfile {
  id     Int     @id @default(autoincrement())
  userId String  @unique
  bio    String?
  user   User?   @relation(fields: [userId], references: [id])
}

model Avatar {
  id       Int     @id @default(autoincrement())
  userId   String  @unique
  photoUrl String?
  user     User?   @relation(fields: [userId], references: [id])
}

model Poll {
  id            Int             @id @default(autoincrement())
  title         String
  authorId      String
  comments      Json
  views         Int             @default(0)
  likes         Int             @default(0)
  author        User            @relation(fields: [authorId], references: [id])
  options       Option[]
  PollResponses PollResponses[]

  @@index([authorId], map: "uq_authorId")
}

model Option {
  id          Int    @id @default(autoincrement())
  option_text String
  pollId      Int
  poll        Poll   @relation(fields: [pollId], references: [id])

  @@index([pollId], map: "uq_pollId")
}

model PollResponses {
  id          Int    @id @default(autoincrement())
  pollId      Int
  reponsderId String
  reponsder   User   @relation(fields: [reponsderId], references: [id])
  poll        Poll   @relation(fields: [pollId], references: [id])

  @@index([reponsderId], map: "uq_reponsderId")
  @@index([pollId], map: "uq_pollId")
}
