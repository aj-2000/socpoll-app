generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id       String    @id @unique
  name     String
  username String    @unique
  session  Session[]
  Key      Key[]
  photoUrl String?   @db.VarChar(256)
  bio      String?   @default("") @db.VarChar(256)

  polls         Poll[]
  pollResponses PollResponses[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([username], map: "uq_username")
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  primary         Boolean
  user            User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Poll {
  id            Int             @id @default(autoincrement())
  title         String          @db.VarChar(5000)
  authorId      String
  comments      Json?
  views         Int             @default(0)
  likes         Int             @default(0)
  author        User            @relation(fields: [authorId], references: [id])
  options       Option[]
  pollResponses PollResponses[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  endDate       DateTime

  @@index([authorId], map: "uq_authorId")
}

model Option {
  id            Int             @id @default(autoincrement())
  optionText    String
  numberOfVotes Int             @default(0)
  pollId        Int
  poll          Poll            @relation(fields: [pollId], references: [id])
  pollResponses PollResponses[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([pollId], map: "uq_pollId")
}

model PollResponses {
  id          Int      @id @default(autoincrement())
  pollId      Int
  responderId String
  responder   User     @relation(fields: [responderId], references: [id])
  poll        Poll     @relation(fields: [pollId], references: [id])
  optionId    Int // New field
  option      Option   @relation(fields: [optionId], references: [id]) // New relation
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([responderId], map: "uq_reponsderId")
  @@index([pollId], map: "uq_pollId")
  @@index([optionId], map: "uq_optionId") // New index
}
